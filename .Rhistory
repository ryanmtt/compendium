cebu2$new3=predict(model2b,interval="confidence")[,3]
ggplot(cebu2, aes(x)) + geom_line(aes(y=new1), colour="red") +  # first layer
+     geom_line(aes(y=new2), colour="green")
ggplot(cebu2, aes(y)) + geom_line(aes(y=new1), colour="red") +  # first layer
+     geom_line(aes(y=new2), colour="green")
ggplot(cebu2, aes(y)) + geom_line(aes(y=new1), colour="red")
ggplot(cebu2, aes(y))+geom_line(aes(y=new1), colour="red")+geom_line(aes(y=new2), colour="green")
rlang::last_trace()
plot(cebu2$mum_age,predict(model2b),xlab="Mum's Age",ylab="Predicted Gestational age in weeks at birth")
plot(cebu2$mum_age,cebu2$new2,add=TRUE)
plot(cebu2$mum_age,cebu2$new1,xlab="Mum's Age",ylab="Predicted Gestational age in weeks at birth")
lines(cebu2$mum_age, cebu2$new2)
lines(cebu2$mum_age, cebu2$new3)
matplot(cebu2$mum_age, cbind(cebu2$new1,cebu$new2),type="l",col=c("red","green"),lty=c(1,1))
cebu3=cebu2[order(cebu2[,19],decreasing=FALSE),]
cebu3
View(cebu3)
cebu3=cebu2[order(cebu2[,9],decreasing=FALSE),]
View(cebu3)
plot(cebu3$mum_age,cebu3$new1,xlab="Mum's Age",ylab="Predicted Gestational age in weeks at birth")
lines(cebu3$mum_age, cebu3$new2)
lines(cebu3$mum_age, cebu3$new3)
library(sandwich)
coeftest(model2, vcov = vcovHC(model2, type="HC3"))
summary(model2)
d1=subset(cebu,smk_preg==0 & cebu$firstprg==0)
d2=subset(cebu,smk_preg==1 & cebu$firstprg==0)
d3=subset(cebu,smk_preg==0 & cebu$firstprg==1)
d4=subset(cebu,smk_preg==1 & cebu$firstprg==1)
colMeans(predict(model3, d1, interval = 'confidence'))
colMeans(predict(model3, d2, interval = 'confidence'))
colMeans(predict(model3, d3, interval = 'confidence'))
colMeans(predict(model3, d4, interval = 'confidence'))
d1=subset(cebu,smk_preg==0 & cebu$firstprg==0)
d2=subset(cebu,smk_preg==1 & cebu$firstprg==0)
d3=subset(cebu,smk_preg==0 & cebu$firstprg==1)
d4=subset(cebu,smk_preg==1 & cebu$firstprg==1)
colMeans(predict(model2, d1, interval = 'confidence'))
colMeans(predict(model2, d2, interval = 'confidence'))
colMeans(predict(model2, d3, interval = 'confidence'))
colMeans(predict(model2, d4, interval = 'confidence'))
matrix(1:10,nrow = 2)
fun = function(one)
{
one.plus.one <- oen + 1
four <- newVar <- matrix(1:10,nrow = 2)
four[ 1, ]
txt <- 'hi'
three <- two+ 1
if(txt == 'hi') 4
5}
{
}
fun(6)
func=function(x)
{
see=5+r9jf
3-111
print(no)
help()
}
fun(3)
func(3)
install.packages("lintr")
View(American.Community.Survey.2015.2019.csv)
install.packages("styler")
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
lintr:::addin_lint()
install.packages("renv")
install.packages("medicaldata")
library(medicaldata)
head(head(covid_testing))
View(covid_testing)
lm(pan_day~age,covid_testing)
library(haven)
data1=read.dta13("University/Medical Statistics and Health Data Science/Regression Models/COURSEWORK 2/frmgham2_IRM_assessment_2023_linlog.dta")
warnings()
data1=read.dta13("University/Medical Statistics and Health Data Science/Regression Models/COURSEWORK 2/frmgham2_IRM_assessment_2023_linlog.dta")
library(readstata13)
data1=read.dta13("University/Medical Statistics and Health Data Science/Regression Models/COURSEWORK 2/frmgham2_IRM_assessment_2023_linlog.dta")
View(data1)
library(haven)
library(readstata13)
data2=read.dta13("University/Medical Statistics and Health Data Science/Regression Models/COURSEWORK 2/frmgham2_IRM_assessment_survival(1).dta")
View(data2)
dim(data1)
lm(bmi_w1~anychd,data1)
plot(data1$bmi_w1,data1$cigpday_w1_grp)
library(tidyverse)
ggplot(data = data1, aes(x = cigpday_w1_grp, y = bmi_w1)) +
geom_boxplot()
as.factor(data1$cigpday_w1_grp)
ggplot(data = data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1) +
geom_boxplot()
ggplot(data = data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1) +
ggplot(data = data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1) +
geom_boxplot()
ggplot(data = data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1) +
ggplot(data = data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1)) +
geom_boxplot()
ggplot(data = data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1)) +
+            geom_boxplot()+labs(x="Level of cigarette consumption at wave 1",y="BMI at wave 1",title="Cigarette consumption against BMI")
rlang::last_trace()
ggplot(data = data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1)) +geom_boxplot()+labs(x="Level of cigarette consumption at wave 1",y="BMI at wave 1",title="Cigarette consumption against BMI")
ggplot(data = data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1)) +geom_point()+labs(x="Level of cigarette consumption at wave 1",y="BMI at wave 1",title="Cigarette consumption against BMI")
ggplot(data = data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1)) +geom_boxplot()+labs(x="Level of cigarette consumption at wave 1",y="BMI at wave 1",title="Cigarette consumption against BMI")
ggplot(data = data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1)) +geom_boxplot()+labs(x="Level of cigarette consumption at wave 1",y="BMI at wave 1",title="Cigarette consumption against BMI")+ylim(10,50)
ggplot(data = data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1)) +geom_boxplot()+labs(x="Level of cigarette consumption at wave 1",y="BMI at wave 1",title="Cigarette consumption against BMI")+ylim(10,58)
ggplot(data = data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1)) +geom_boxplot()+labs(x="Level of cigarette consumption at wave 1",y="BMI at wave 1",title="Cigarette consumption against BMI")+ylim(10,57)
model1=lm(bmi_w1~cigpday_w1_grp,data=data1)
summary(model1)
model1=lm(bmi_w1~as.factor(cigpday_w1_grp),data=data1)
summary(model1)
confint(model1)
model2=lm(bmi_w1~1,data=data1)
lrtest(model1,model2)
library(lmtest)
lrtest(model1,model2)
summary(model1)
mean(data1$bmi_w1)
typeof(data1$cigpday_w1_grp)
which(data1$cigpday_w1_grp))
which(data1$cigpday_w1_grp)
is.numeric(data1$cigpday_w1_grp)
model3=lm(bmi_w1~cigpday_w1_grp,data=data1)
summary(model3)
confint(model3)
lrtest(model1,model3)
p <- ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1)) +
geom_point() +
geom_categorical_model()
library(dplyr)
library(ggplot2)
p <- ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1)) +
geom_point() +
geom_categorical_model()
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1)) +
geom_point()
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1)) +
geom_point() + geom_smooth(method=lm, se=FALSE)
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1)) +
geom_point() + geom_smooth(method=lm, se=TRUE)
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1)) +
geom_smooth(method=lm, se=TRUE)
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1)) +
geom_smooth(method=lm, se=TRUE)
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1)) +geom_point()
+geom_smooth(method=lm, se=TRUE)
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))
+geom_smooth(formula = y ~ x, method = lm, se = FALSE)
ggplot(data1, aes(x = as.integer(factor(cigpday_w1_grp)), y = bmi_w1))
+geom_smooth(formula = y ~ x, method = lm, se = FALSE)
factor(cigpday_w1_grp)
factor(data1$cigpday_w1_grp)
ggplot(data1, aes(x = as.integer(factor(cigpday_w1_grp)), y = bmi_w1))
+geom_smooth(formula = y ~ x, method = lm, se = FALSE)
ggplot(data1, aes(x = as.integer(factor(cigpday_w1_grp)), y = bmi_w1))+geom_smooth(formula = y ~ x, method = lm, se = FALSE)
fitted(model3)
data1$predictlid=fitted(model3)
fitted(model3)
data1$predictlin=data1$predictlid
plot(data1$predictlin,data1$bmi_w1)
summary(model3)
fitted(model3)
plot(data1$predictlin,data1$bmi_w1)
data1$predictlin
levels(data1$predictlin)
levels(as.factor(data1$predictlin)
)
plot(data1$cigpday_w1_grp,data1$predictlin)
means <- emmeans(model1, "cigpday_w1_grp")
install.packages("emmeans")
means <- emmeans(model1, "cigpday_w1_grp")
means <- emmeans(model1, "cigpday_w1_grp")
means <- emmeans(model1, "cigpday_w1_grp")
install.packages("geom_parallel_slopes ")
install.packages("geom_parallel_slopes")
library(dplyr)
library(ggplot2)
ggplot(data1, aes(x = as.integer((cigpday_w1_grp)), y = bmi_w1))
+geom_point()+geom_parallel_slopes()
ggplot(data1, aes(x = as.integer((cigpday_w1_grp)), y = bmi_w1))
+geom_point()+geom_parallel_slopes()
ggplot(data1, aes(x = as.integer((cigpday_w1_grp)), y = bmi_w1))
+geom_point()+geom_parallel_slopes()
rlang::last_trace()
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))
+geom_point()+geom_parallel_slopes()
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))
+geom_point()
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1)
+geom_point()
)
)
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))+geom_point()
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))+geom_point()+geom_parallel_slopes()
install.packages("moderndrive")
install.packages("moderndive")
geom_parallel_slopes
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))+geom_point()+geom_parallel_slopes()
library(moderndive)
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))+geom_point()+geom_parallel_slopes()
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))+geom_point()+geom_categorical_model()
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))+geom_categorical_model()
plot(data1$cigpday_w1_grp,data1$predictlin)
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))+geom_categorical_model()
+points(data1$cigpday_w1_grp,data1$predictlin, col='blue')
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))+geom_categorical_model()+points(data1$cigpday_w1_grp,data1$predictlin, col='blue')
fitted(model3)
data1$predictlin=fitted(model3)
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))+geom_categorical_model()+geom_point(cigpday_w1_grp,predictlin, col='red')
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))+geom_categorical_model()+geom_point(as.factor(cigpday_w1_grp),predictlin, col='red')
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))+geom_categorical_model()+geom_point(as.factor(data1$cigpday_w1_grp),data1$predictlin, col='red')
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))+geom_categorical_model()+geom_point(aes(as.factor(cigpday_w1_grp),predictlin, col='red'))
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))+geom_categorical_model()+geom_point(aes(as.factor(cigpday_w1_grp),predictlin),col='red',size=4)
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))+geom_categorical_model()+geom_point(aes(as.factor(cigpday_w1_grp),predictlin),col='red',size=3)
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))+geom_categorical_model()+geom_point(aes(as.factor(cigpday_w1_grp),predictlin),col='red',size=3)+labs(x="Level of cigarette consumption at wave 1",y="BMI at wave 1",title="Cigarette consumption against estimated mean BMI with confidence intervals and predicted values from the linear relationship model")
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))+geom_categorical_model()+geom_point(aes(as.factor(cigpday_w1_grp),predictlin),col='red',size=3)+labs(x="Level of cigarette consumption at wave 1",y="BMI at wave 1",title="Cigarette consumption against estimated mean BMI with confidence intervals and predicted linear relationship model values")
ggplot(data1, aes(x = as.factor(cigpday_w1_grp), y = bmi_w1))+geom_categorical_model()+geom_point(aes(as.factor(cigpday_w1_grp),predictlin),col='red',size=3)+labs(x="Level of cigarette consumption at wave 1",y="BMI at wave 1",title="Cigarette consumption against estimated mean BMI with confidence intervals")
model4=lm(heartrte_w1~bmi_w1,data=data1)
model4=lm(heartrte_w1~bmi_w1,data=data1)
summary(model4)
plot(data1$heartrte_w1,data1$bmi_w1)
confint(model4)
data1$fitted_values <- predict(model4)
ggplot(data, aes(x = bmi_w1, y = heartrte_w1)) +
geom_point() +
geom_line(aes(y = fitted_values), color = "red")
ggplot(data1, aes(x = bmi_w1, y = heartrte_w1)) +
geom_point() +
geom_line(aes(y = fitted_values), color = "red")
labs(title = "Scatterplot with Fitted Values",
x = "X Variable",
y = "Y Variable") +
theme_minimal()
ggplot(data1, aes(x = bmi_w1, y = heartrte_w1)) +
geom_point() +
geom_line(aes(y = fitted_values), color = "red")
labs(title = "Scatterplot with Fitted Values",
x = "BMI",
y = "Heart Rate in bpm") +
theme_minimal()
ggplot(data1, aes(x = bmi_w1, y = heartrte_w1)) +
geom_point() +
geom_line(aes(y = fitted_values), color = "red")
labs(title = "Scatterplot with Fitted Values",
xlab = "BMI",
ylab = "Heart Rate in bpm") +
theme_minimal()
ggplot(data1, aes(x = bmi_w1, y = heartrte_w1)) +
geom_point() +
geom_line(aes(y = fitted_values), color = "red")
labs(title = "Scatterplot with Fitted Values",
x= "BMI",
y= "Heart Rate in bpm") +
theme_minimal()
ggplot(data1, aes(x = bmi_w1, y = heartrte_w1)) +
geom_point() +
geom_line(aes(y = fitted_values), color = "red")
labs(title = "Scatterplot with Fitted Values",
x= "BMI",
y= "Heart Rate in bpm")
ggplot(data1, aes(x = bmi_w1, y = heartrte_w1)) +
geom_point() +
geom_line(aes(y = fitted_values), color = "red") + labs(title = "Scatterplot with Fitted Values",
x= "BMI",
y= "Heart Rate in bpm")
ggplot(data1, aes(x = bmi_w1, y = heartrte_w1)) +
geom_point() +
geom_line(aes(y = fitted_values), color = "red") + labs(title = "Scatterplot of Fitted Values and Raw Data",
x= "BMI",
y= "Heart Rate in bpm")
ggplot(data1, aes(x = bmi_w1, y = heartrte_w1)) +
geom_point() +
geom_line(aes(y = fitted_values), color = "red",size=2) + labs(title = "Scatterplot of Fitted Values and Raw Data",
x= "BMI",
y= "Heart Rate in bpm")
ggplot(data1, aes(x = bmi_w1, y = heartrte_w1)) +
geom_point() +
geom_line(aes(y = fitted_values), color = "red",size=1.5) + labs(title = "Scatterplot of Fitted Values and Raw Data",
x= "BMI",
y= "Heart Rate in bpm")
plot(model4)
plot(data1$bmi_w1,model4$residuals)
modelfp <- mfp(heartrte_w1~fp(bmi_w1,df=4,select=0.05),family=gaussian,data=data1,verbose=TRUE)
library(readstata13)
library(mfp)
modelfp <- mfp(heartrte_w1~fp(bmi_w1,df=4,select=0.05),family=gaussian,data=data1,verbose=TRUE)
modelfp$pvalues
modelfp$pvalues
modelfp <- mfp(heartrte_w1~fp(bmi_w1,df=4,select=0.05),family=gaussian,data=data1,verbose=TRUE)
View(data1)
data1=data.frame(data1)
modelfp <- mfp(heartrte_w1~fp(bmi_w1,df=4,select=0.05),family=gaussian,data=data1,verbose=TRUE)
data1=read.dta13("University/Medical Statistics and Health Data Science/Regression Models/COURSEWORK 2/frmgham2_IRM_assessment_2023_linlog.dta")
View(data1)
dim(data1)
modelfp <- mfp(heartrte_w1~fp(bmi_w1,df=4,select=0.05),family=gaussian,data=data1,verbose=TRUE)
modelfp <- mfp(heartrte_w1~fp(bmi_w1,df=4,select=0.05),family=gaussian,data=data1,verbose=TRUE)
# Non-linear models
modelfp <- mfp(heartrte_w1~fp(bmi_w1,df=4,select=0.05),family=gaussian,data=data1,verbose=TRUE)
library(haven)
library(readstata13)
library(tidyverse)
library(lmtest)
library(dplyr)
library(ggplot2)
library(moderndive)
library(readstata13)
library(mfp)
modelfp <- mfp(heartrte_w1~fp(bmi_w1,df=4,select=0.05),family=gaussian,data=data1,verbose=TRUE)
modelfp <- mfp(heartrte_w1~fp(bmi_w1,df=4,select=0.05),family=gaussian,data=data1,verbose=TRUE)
is.numeric(data1$bmi_w1)
is.numeric(data1$heartrte_w1)
data1
data1=read.dta13("University/Medical Statistics and Health Data Science/Regression Models/COURSEWORK 2/frmgham2_IRM_assessment_2023_linlog.dta")
View(data1)
modelfp <- mfp(heartrte_w1~fp(bmi_w1,df=4,select=0.05),family=gaussian,data=data1,verbose=TRUE)
modelfp <- mfp(heartrte_w1~fp(bmi_w1,df=4,select=0.05),family=gaussian,data=data1,verbose=TRUE)
install.packages(c("brio", "bslib", "checkmate", "cli", "covr", "cowplot", "cpp11", "crandep", "crosstable", "curl", "dagitty", "data.table", "datawizard", "DBI", "deldir", "desc", "dplyr", "e1071", "fansi", "gdtools", "gtools", "haven", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "interp", "jsonlite", "later", "lifecycle", "lintr", "lme4", "maps", "markdown", "Matrix", "MatrixModels", "mvtnorm", "parameters", "pkgbuild", "processx", "progress", "R.utils", "ragg", "RcppArmadillo", "RcppEigen", "Rdpack", "rgl", "rlang", "robustbase", "rprojroot", "rsconnect", "s2", "sandwich", "sass", "scales", "sf", "shiny", "sp", "stringi", "stringr", "svglite", "testthat", "this.path", "tinytex", "tseries", "TTR", "units", "V8", "vctrs", "vroom", "waldo", "wk", "xfun", "xml2", "yaml"))
library(haven)
library(readstata13)
library(tidyverse)
library(lmtest)
library(dplyr)
library(ggplot2)
library(moderndive)
library(readstata13)
library(mfp)
modelfp <- mfp(heartrte_w1~fp(bmi_w1,df=4,select=0.05),family=gaussian,data=data1,verbose=TRUE)
data1=read.dta13("University/Medical Statistics and Health Data Science/Regression Models/COURSEWORK 2/frmgham2_IRM_assessment_2023_linlog.dta")
modelfp <- mfp(heartrte_w1~fp(bmi_w1,df=4,select=0.05),family=gaussian,data=data1,verbose=TRUE)
summary(lm(heartrte_w1~bmi_w1,data=data1))
options(error=recover)
reach_full_in <- reachability(krack_full, 'in')
library(abind)
library(akima)
detach("package:abind", unload = TRUE)
detach("package:akima", unload = TRUE)
remove.packages("KernSmooth", lib="C:/Program Files/R/R-4.2.2/library")
remove.packages("astsa")
library(haven)
data1 <- read_dta("University/Medical Statistics and Health Data Science/Regression Models/COURSEWORK 2/frmgham2_IRM_assessment_2023_linlog.dta")
View(data1)
modelfp <- mfp(heartrte_w1~fp(bmi_w1,df=4,select=0.05),family=gaussian,data=data1,verbose=TRUE)
data1=read.dta13("University/Medical Statistics and Health Data Science/Regression Models/COURSEWORK 2/frmgham2_IRM_assessment_2023_linlog.dta")
View(data1)
data1=read.dta13("University/Medical Statistics and Health Data Science/Regression Models/COURSEWORK 2/frmgham2_IRM_assessment_2023_linlog.dta")#
modelfp <- mfp(as.numeric(heartrte_w1)~fp(as.numeric(bmi_w1),df=4,select=0.05),family=gaussian,data=data1,verbose=TRUE)
remove.packages("mfp")
install.packages('mfp')
install.packages("mfp")
libary(mfp)
library(mfp)
modelfp <- mfp(heartrte_w1~fp(bmi_w1,df=4,select=0.05),family=gaussian,data=data1,verbose=TRUE)
data1=read.dta13("University/Medical Statistics and Health Data Science/Regression Models/COURSEWORK 2/frmgham2_IRM_assessment_2023_linlog.dta")
library(haven)
library(readstata13)
library(tidyverse)
library(lmtest)
library(dplyr)
library(ggplot2)
library(moderndive)
library(readstata13)
library(mfp)
library(haven)
library(readstata13)
library(tidyverse)
library(lmtest)
library(dplyr)
library(ggplot2)
library(moderndive)
library(readstata13)
library(mfp)
data1=read.dta13("University/Medical Statistics and Health Data Science/Regression Models/COURSEWORK 2/frmgham2_IRM_assessment_2023_linlog.dta")
View(data1)
dim(data1)
library(abind)
library(akima)
detach("package:akima", unload = TRUE)
detach("package:abind", unload = TRUE)
remove.packages("abind")
remove.packages("akima")
remove.packages( installed.packages( priority = "NA" )[,1] )
setwd("//wsl.localhost/Ubuntu/home/AHDS_assessment2_2478688")
# Cleaning the data
library("tidyverse")
library(dplyr)
INPUT_FILE_BMI <- "raw/BMI.csv"
INPUT_FILE_DEMO <- "raw/DEMO_D.csv"
INPUT_FILE_FFQ <- "raw/FFQRAW_D.csv"
# check files exist:
data_dir_exists = fs::dir_exists("raw")
data_file_exists1 = fs::file_exists(INPUT_FILE_BMI)
data_file_exists2 = fs::file_exists(INPUT_FILE_DEMO)
data_file_exists3 = fs::file_exists(INPUT_FILE_FFQ)
print(glue::glue("Current working directory: {getwd()}"))
print(glue::glue("{INPUT_FILE_BMI} exsits: {data_file_exists1}"))
print(glue::glue("{INPUT_FILE_DEMO} exsits: {data_file_exists2}"))
print(glue::glue("{INPUT_FILE_FFQ} exsits: {data_file_exists3}"))
# load the dataset into R:
BMI_RAW <- read.csv(INPUT_FILE_BMI)
DEMO_RAW <- read.csv(INPUT_FILE_DEMO)
FFQ_RAW <- read.csv(INPUT_FILE_FFQ)
glimpse(BMI_RAW)
glimpse(DEMO_RAW)
glimpse(FFQ_RAW)
# Basic Exploration:
data1 <- inner_join(BMI_RAW, DEMO_RAW, by = "SEQN")
data <- inner_join(data1, FFQ_RAW, by = "SEQN")
dim(data)
# Transform the data further for analysis/ plotting:
# We decide to analyse the assocation between the amount of fruit
# consumed and BMI of individuals in the NHANES dataset
# and so clean and transform the data as so:
# we remove missing observations
subset_data<-data[data$FFQ0016<12 & data$FFQ0017<12 & data$FFQ0018<12 & data$FFQ0019<12 & data$FFQ0020<12 & data$FFQ0022<12 & data$FFQ0027<12,]
columns_to_keep <- c("SEQN","BMXBMI","RIAGENDR","INDFMPIR","FFQ0016","FFQ0017","FFQ0018","FFQ0019","FFQ0020","FFQ0022","FFQ0027")
subset_data <- subset_data %>% select(all_of(columns_to_keep))
subset_data <- subset_data %>%
filter(!is.na(!!sym("BMXBMI")))
subset_data <- subset_data %>% mutate(INCBIN= ifelse(INDFMPIR > 2, 1, 0))
subset_data <- subset_data[complete.cases(subset_data$INCBIN), ]
vec=c(0,mean(c(1,6)),mean(c(7,11)),12,mean(c(24,36)),52,104,mean(c(156,208)),mean(c(260,312)),365,730)
which(colnames(subset_data) == "FFQ0016")
which(colnames(subset_data) == "FFQ0027")
for(i in 5:11)
{
subset_data[,i]=as.factor(subset_data[,i])
}
l_mapping <- list(FFQ0016= c('1' = "0", '2' = "3.5", '3' = "9",'4' = "12" ,'5' = "30",'6' = "52",'7' = "104",'8' = "182" ,'9' = "286",'10' = "365", '11' = "730"),FFQ0017= c('1' = "0", '2' = "3.5", '3' = "9",'4' = "12" ,'5' = "30",'6' = "52",'7' = "104",'8' = "182" ,'9' = "286",'10' = "365", '11' = "730"),
FFQ0018= c('1' = "0", '2' = "3.5", '3' = "9",'4' = "12" ,'5' = "30",'6' = "52",'7' = "104",'8' = "182" ,'9' = "286",'10' = "365", '11' = "730"), FFQ0019= c('1' = "0", '2' = "3.5", '3' = "9",'4' = "12" ,'5' = "30",'6' = "52",'7' = "104",'8' = "182" ,'9' = "286",'10' = "365", '11' = "730"),
FFQ0020= c('1' = "0", '2' = "3.5", '3' = "9",'4' = "12" ,'5' = "30",'6' = "52",'7' = "104",'8' = "182" ,'9' = "286",'10' = "365", '11' = "730"), FFQ0022= c('1' = "0", '2' = "3.5", '3' = "9",'4' = "12" ,'5' = "30",'6' = "52",'7' = "104",'8' = "182" ,'9' = "286",'10' = "365", '11' = "730"),
FFQ0027= c('1' = "0", '2' = "3.5", '3' = "9",'4' = "12" ,'5' = "30",'6' = "52",'7' = "104",'8' = "182" ,'9' = "286",'10' = "365", '11' = "730"))
col_to_revalue=colnames(subset_data[,5:11])
for (col in col_to_revalue) {
subset_data[[col]] <- dplyr::recode(subset_data[[col]], !!!l_mapping[[col]])
}
for(i in 5:11)
{
subset_data[,i]=as.numeric(gsub("\"", "", as.character(subset_data[,i])))
}
subset_data$fruit <- rowSums(subset_data[,c(col_to_revalue)])
# subset(subset_data, select = -c(# col names of ones i want to remove)
# save this subset_dataf in the clean directory in compendium
subset_data %>% write_csv("clean/finaldata.csv")
# Cleaning the data
library("tidyverse")
library(dplyr)
INPUT_FILE_BMI <- "raw/BMI.csv"
INPUT_FILE_DEMO <- "raw/DEMO_D.csv"
INPUT_FILE_FFQ <- "raw/FFQRAW_D.csv"
# check files exist:
data_dir_exists = fs::dir_exists("raw")
data_file_exists1 = fs::file_exists(INPUT_FILE_BMI)
data_file_exists2 = fs::file_exists(INPUT_FILE_DEMO)
data_file_exists3 = fs::file_exists(INPUT_FILE_FFQ)
print(glue::glue("Current working directory: {getwd()}"))
print(glue::glue("{INPUT_FILE_BMI} exsits: {data_file_exists1}"))
print(glue::glue("{INPUT_FILE_DEMO} exsits: {data_file_exists2}"))
print(glue::glue("{INPUT_FILE_FFQ} exsits: {data_file_exists3}"))
# load the dataset into R:
BMI_RAW <- read.csv(INPUT_FILE_BMI)
DEMO_RAW <- read.csv(INPUT_FILE_DEMO)
FFQ_RAW <- read.csv(INPUT_FILE_FFQ)
glimpse(BMI_RAW)
glimpse(DEMO_RAW)
glimpse(FFQ_RAW)
# Basic Exploration:
data1 <- inner_join(BMI_RAW, DEMO_RAW, by = "SEQN")
data <- inner_join(data1, FFQ_RAW, by = "SEQN")
dim(data)
# Transform the data further for analysis/ plotting:
# We decide to analyse the assocation between the amount of fruit
# consumed and BMI of individuals in the NHANES dataset
# and so clean and transform the data as so:
# we remove missing observations
subset_data<-data[data$FFQ0016<12 & data$FFQ0017<12 & data$FFQ0018<12 & data$FFQ0019<12 & data$FFQ0020<12 & data$FFQ0022<12 & data$FFQ0027<12,]
columns_to_keep <- c("SEQN","BMXBMI","RIAGENDR","INDFMPIR","FFQ0016","FFQ0017","FFQ0018","FFQ0019","FFQ0020","FFQ0022","FFQ0027")
subset_data <- subset_data %>% select(all_of(columns_to_keep))
subset_data <- subset_data %>%
filter(!is.na(!!sym("BMXBMI")))
subset_data <- subset_data %>% mutate(INCBIN= ifelse(INDFMPIR > 2, 1, 0))
subset_data <- subset_data[complete.cases(subset_data$INCBIN), ]
vec=c(0,mean(c(1,6)),mean(c(7,11)),12,mean(c(24,36)),52,104,mean(c(156,208)),mean(c(260,312)),365,730)
which(colnames(subset_data) == "FFQ0016")
which(colnames(subset_data) == "FFQ0027")
for(i in 5:11)
{
subset_data[,i]=as.factor(subset_data[,i])
}
l_mapping <- list(FFQ0016= c('1' = "0", '2' = "3.5", '3' = "9",'4' = "12" ,'5' = "30",'6' = "52",'7' = "104",'8' = "182" ,'9' = "286",'10' = "365", '11' = "730"),FFQ0017= c('1' = "0", '2' = "3.5", '3' = "9",'4' = "12" ,'5' = "30",'6' = "52",'7' = "104",'8' = "182" ,'9' = "286",'10' = "365", '11' = "730"),
FFQ0018= c('1' = "0", '2' = "3.5", '3' = "9",'4' = "12" ,'5' = "30",'6' = "52",'7' = "104",'8' = "182" ,'9' = "286",'10' = "365", '11' = "730"), FFQ0019= c('1' = "0", '2' = "3.5", '3' = "9",'4' = "12" ,'5' = "30",'6' = "52",'7' = "104",'8' = "182" ,'9' = "286",'10' = "365", '11' = "730"),
FFQ0020= c('1' = "0", '2' = "3.5", '3' = "9",'4' = "12" ,'5' = "30",'6' = "52",'7' = "104",'8' = "182" ,'9' = "286",'10' = "365", '11' = "730"), FFQ0022= c('1' = "0", '2' = "3.5", '3' = "9",'4' = "12" ,'5' = "30",'6' = "52",'7' = "104",'8' = "182" ,'9' = "286",'10' = "365", '11' = "730"),
FFQ0027= c('1' = "0", '2' = "3.5", '3' = "9",'4' = "12" ,'5' = "30",'6' = "52",'7' = "104",'8' = "182" ,'9' = "286",'10' = "365", '11' = "730"))
col_to_revalue=colnames(subset_data[,5:11])
for (col in col_to_revalue) {
subset_data[[col]] <- dplyr::recode(subset_data[[col]], !!!l_mapping[[col]])
}
for(i in 5:11)
{
subset_data[,i]=as.numeric(gsub("\"", "", as.character(subset_data[,i])))
}
subset_data$fruit <- rowSums(subset_data[,c(col_to_revalue)])
# subset(subset_data, select = -c(# col names of ones i want to remove)
# save this subset_dataf in the clean directory in compendium
subset_data %>% write_csv("clean/finaldata.csv")
5+5
